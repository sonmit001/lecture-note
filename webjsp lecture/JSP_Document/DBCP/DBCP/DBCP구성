1. http://commons.apache.org/proper/commons-pool/download_pool.cgi
2. http://commons.apache.org/proper/commons-dbcp/download_dbcp.cgi

필요한 class 파일 및 java 파일 다운 로드

두개의 jar 파일 안에 있는 class 사용 한다
두개의 파일을 WEB-INF 폴더 및에 lib 복사 붙여넣기
commons-dbcp-1.4.jar
commons-pool-1.6.jar


풀에 대한 설정 파일 만들기
확장자가 *.jocl 인 파일에 기본 설정 만들기

    <object class = "org.apache.commons.dbcp.DriverManagerConnectionFactory">
        <string value = "jdbc:oracle:thin:@localhost:1521:XE" />
        <string value = "hr" />
        <string value = "hr" />
    </object>
 
 설정한 API사용하기 위해서 LOAD 작업
 servlet  파일에  init( 초기화 ) 메서드를 통해서
 웹 서버 동작이 자동으로 올라게 한다 (connection pool)
 
 1. 초기화 로딩 하는  servlet 파일 작성
 => ....init() 구현
 
 2. 설정 정보를 가지는 web.xml 작성
 =>    
 <servlet>
  	<servlet-name>DBCPInit</servlet-name>
	<servlet-class>JDBC.loader.DBCPInit</servlet-class>
	<init-param>
			<param-name>jdbcdriver</param-name>
			<param-value>oracle.jdbc.OracleDriver</param-value>
	</init-param>
	<load-on-startup>1</load-on-startup>
  </servlet>
 
 3. jsp 페이지에서
 conn.close() ; 연결을 끝는 것이 아니고 반환하는 메서드
 
 
 <object class = "org.apache.commons.dbcp.PoolableConnectionFactory"
    xmlns = "http://apache.org/xml/xmlns/jakarta/commons/jocl">
    <object class = "org.apache.commons.dbcp.DriverManagerConnectionFactory">
        <string value = "jdbc:oracle:thin:@localhost:1521:ORCL" />
        <string value = "hr" />
        <string value = "1004" />
    </object>

  <object class = "org.apache.commons.pool.impl.GenericObjectPool">
    <object class ="org.apache.commons.pool.PoolableObjectFactory" null="true" />
		<int value  =  "10"/>   <!-- maxActive 제공할 최대커넥션 수 -->
        <byte value = "1"/>     <!-- whenExhaustedAction  -->
        <long value = "10000"/> <!-- maxWait  -->
        <int value  = "10"/>    <!-- maxidle 사용하지 않고 풀에 저장될 최대 커넥션 수   -->
        <int value  = "3"/>      <!-- minidle  -->
        <boolean value = "true"/>
        <boolean value = "true"/>
        <long value    = "600000"/>
        <int value = "5"/>
        <long value = "3600000"/>
        <boolean value ="true"/>
    </object>
    <object class = "org.apache.commons.pool.impl.GenericKeyedObjectPoolFactory" null="true" />
    <string null = "true" />
    <boolean value = "false" />
     <boolean value = "true" />
     <!--
성	설명
maxActive	커넥션 풀이 제공할 최대 커넥션 개수

whenExhaustedAction	커넥션 풀에서 가져올 수 있는 커넥션이 없을 때 어떻게 동작할지를 지정한다. 
1일 경우 maxWait 속성에서 지정한 시간만큼 커넥션을 구할 때 까지 기다리며,
 0일 경우 에러를 발생시킨다. 
 2일 경우에는 일시적으로 커넥션을 생성해서 사용한다.

maxWait	whenExhaustedAction 속성의 값이 1일 때 사용되는 대기 시간. 단위는 1/1000초이며, 0 보다 작을 경우 무한히 대기한다.

maxIdle	사용되지 않고 풀에 저장될 수 있는 최대 커넥션 개수. 
음수일 경우 제한이 없다.

minIdle	사용되지 않고 풀에 저장될 수 있는 최소 커넥션 개수.

testOnBorrow	true일 경우 커넥션 풀에서 커넥션을 가져올 때 커넥션이 유효한지의 여부를 검사한다.

testOnReturn	true일 경우 커넥션 풀에 커넥션을 반환할 때 커넥션이 유효한지의 여부를 검사한다.

timeBetweenEvctionRunsMillis	사용되지 않은 커넥션을 추출하는 쓰레드의
 실행 주기를 지정한다. 
 양수가 아닐 경우 실행되지 않는다. 단위는 1/1000 초이다.

numTestsPerEvictionRun	사용되지 않는 커넥션을 몇 개 검사할지 지정한다.

minEvictableIdleTimeMillis	사용되지 않는 커넥션을 추출할 때 이 속성에서 지정한 시간 이상 비활성화 상태인 커넥션만 추출한다. 양수가 아닌 경우 비활성화된 시간으로는 풀에서 제거되지 않는다. 시간 단위는 1/1000초이다.

testWhileIdle	true일 경우 비활성화 커넥션을 추출할 때 커넥션이 유효한지의 여부를 검사해서 유효하지 않은 커넥션은 풀에서 제거한다.
=======================================================================
몇몇 속성은 성능에 중요한 영향을 미치기 때문에 웹 어플리케이션의 사용량에 따라서 알맞게 지정해주어야 하는데, 
다음과 같이 고려해서 각 속성의 값을 지정하는 것이 좋다.

maxActive - 사이트의 최대 커넥션 사용량을 기준으로 지정. 
            동시 접속자수에 따라서 지정한다.
minIdle - 사용되지 않는 커넥션의 최소 개수를 0으로 지정하게 되면 풀에 
          저장된 커넥션의 개수가 0이 될 수 있으며, 
          이 경우 커넥션이 필요할 때 다시 커넥션을 생성하게 된다. 
          따라서 커넥션의 최소 개수는 5개 정도로 지정해두는 것이 좋다.
timeBetweenEvctionRunsMillis 
- 이 값을 알맞게 지정해서 사용되지 않는 커넥션을 풀
에서 제거하는 것이 좋다. 커넥션의 동시 사용량은 보통 새벽에 최저이며 낮 시간대에 
최대에 이르게 되는데 이 두 시간대에 필요한 커넥션의 개수 차이는 수십개에 이르게 된다. 이때 최대 상태에 접어들었더가 최소 상태로 가게 되면 풀에서 사용되지 않는 커넥션의 개수가 점차 증가하게 된다. 따라서 사용되지 않는 커넥션은 일정 시간 후에 삭제되도록 하는 것이 좋다. 보통 10~20분 단위로 사용되지 않는 커넥션을 검사하도록 지정하는 것이 좋다.
testWhileIdle - 사용되지 않는 커넥션을 검사할 때 유효하지 않은 
                커넥션은 검사하는 것이 좋다.
                

JNDI는 네이밍 및 디렉토리 서비스에 대한 인터페이스를 정의하는 자바 API,
JNDI 자체는 API일뿐 네이밍 및 디렉토리 서비스가 아니다
JNDI를 사용하기 위해선 네이밍, 및 디렉토리 서비스의 구현이 있어야 한다. JNDI는 내부적인 서비스 프로바이더 구현에 대한 서비스 독립적인 인터페이스를 제공한다.
오브젝트 바인딩하기
오브젝트를 바인딩한다는것은 JNDI 서브스에 네임을 추가하고 이 네임을 자바 오브젝트와 연결하는 것을 의미한다. 이러한 네임과 오브젝트는 컨텍스트로 바인딩한다.
-->
</object>
 