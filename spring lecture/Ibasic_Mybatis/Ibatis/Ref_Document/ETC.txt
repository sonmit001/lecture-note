*************************************************************************

batis 동적 쿼리 생성시 dynamic, prepend 용법과 설명

1. dynamic : where 절에 들어갈 하위 요소가 존재하면 where 를 sql문에  추가된다

             맨처음 val1 에서 추가되는 prepend(AND)는 자동으로 사라진다.

 

2. prepend  : 쿼리에 지정된 문자(AND)를 추가하여 해당 쿼리에 반영

Ex) AND, OR 가능

 

============================== Example ==============================

<dynamic prepend="WHERE">

	<isNotEmpty property="val1" prepend="AND">

		col1 = #val1#

	</isNotEmpty>

	<isNotEmpty property="val2" prepend="AND">

		col2 = #val2#

	</isNotEmpty>

</dynamic>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
* 위 실행 type별 결과  : 

1. val1, val2  둘다 값이 존재 : WHERE col1 = 'aaa' AND col2 ='bbb'

2. val1 만 값이 존재 : WHERE col1 = 'aaa'

3. val2 만 값이 존재 : WHERE col2 ='bbb'

4. 둘다 null 인 경우 : 추가되는 부분 없음

===================
iBatis를 사용해서 쿼리작업을 하면 아래와같은 장점이 있다.

      1. xml로 sql을 관리하므로 가독성이 높아진다.

      2. db연결 정보도 conf로 관리하므로 수정하기 쉬워지며

      3. 그래서 코드내에서 여러개의 db에 선택적으로 접근하기도 수월하다.(테스트/실장비 자유롭게 왔다갔다~)

      4.ORMap을 해주기때문에 결과를 가져올때도 사용하기가 쉽다.

 

xml의 statement 내에서 변수들을 받을때 '#' 를 사용해서 변수를 접근한다.

그러나 테이블명/필드명들을 접근할때는 '$' 를 사용한다.

      select * from $tablename$

이런식으로..

 

 

그런데, 여기서 테이블명이 바뀌면 읽어오는 필드명도 보통은 달라지게마련..

iBatis는 내부적으로 읽어온 결과의 metadata를 저장해두는데

읽어온 필드명이 달라지면 이전의 metadata와 mapping이 되지않아 에러를 발생시킨다.

 

이럴때 statement의 attribute로 "remapResults=true"를 추가해줘야 한다.

이렇게 되면 매번 metadata를 세팅하므로 사실은 오버헤드가 있지만 에러는 발생하지 않는다.

 

문서들을 찾아보면 이 오버헤드 때문에 꼭 필요한 경우가 아니면 이 attribute를 활성화하지 말라고 되어있는데

실제로 아래 두가지 경우를 테스트 했을때 속도차는 별로 없었다.

1. remapResults=true로 하고 두개의 테이블에 번갈아가면서 접근한것

2. 각각의 테이블로 가는 sql을 따로 두개 작성한후에 remapResults=false로 해놓고 번갈아가면서 접근한것




=========
1. <dynamic>
    ㄱ. 속성정보
      - prepend(선택적)
      - open(선택적)
      - close(선택적)

2. 이항연산
    ㄱ. 속성정보
      - prepend(선택적)
      - open(선택적)
      - close(선택적)
      - property(필수)
      - removeFirstPrepend(선택적)
      - compareProperty(compareValue가 명시되지 않으면 필수)
  
    ㄴ. 요소
       - <isEqual> property속성값이 compareProperty 값이나 compareValue값과 같은지 검사
       - <isNotEqual> property속성값이 compareProperty 값이나 compareValue 값과 같지
          않은지 검사
       - <isGreatThan>property속성값이 compareProperty 값이나 compareValue 값보다 큰지
          검사
       -  <isGreatEqual>property속성값이 compareProperty 값이나 compareValue 값보다 크거나 
          같은지 검사
       - <isLessThan>property속성값이 compareProperty 값이나 compareValue 값보다 작은지
          검사
       -  <isLessEqual>property속성값이 compareProperty 값이나 compareValue 값보다 작거나
          같은지 검사 

3. 단항연산
    ㄱ. 속성정보
      - prepend(선택적)
      - open(선택적)
      - close(선택적)
      - property(필수)
      - removeFirstPrepend(선택적)

    ㄴ. 요소
       - <isPropertyAvailable> 명시된 프로퍼티가 파라미터에 존재하는지 검사 빈즈에서는 
          프로퍼티를 찾고 Map에서는 키를 찾는다.
       -  <isNotPropertyAvailable> 명시된 프로퍼티가 파라미터에 존재하지 않는지 검사.
           빈즈에서는 프로퍼티를 찾고 Map서는 키를 찾는다.
       - <isNull> 명시된 프로퍼티가 null인지 검사. 키가 존재하지 않으면 true
          를 반환한다.
       - <isNotNull> 명시된 프로퍼티가 null이 아닌 다른 값인지 검사.
           키가 존재하면 true를 반환한다.
       - <isEmpty> 명시된 프로퍼티가 null이거나 빈 문자열(""), 빈 컬렉션이나
           빈 String. valueOf()인지를 검사 
       - <isNotEmpty>  명시된 프로퍼티가 null이 아니거나 빈 문자열(""), 빈 컬렉션이나 빈 String. 
           valueOf()가 아닌지를 검사 

4. 파라미터
    ㄱ. 속성정보
      - prepend(선택적)
      - open(선택적)
      - close(선택적)
      - removeFirstPrepend(선택적)

    ㄴ. 요소
      - <isParameterPresent> 파라미터 객체가 존재하는지 평가
      - <isNotParameterPresent> 파라미터가 존재하지 않는지 평가

5. <iterate> 
    ㄱ. 속성정보
      - prepend(선택적)
      - open(선택적)
      - close(선택적)
      - removeFirstPrepend(선택적)
      - conjunction(선택적)
[출처] iBatis 동적인 SQL 항목별 요소|작성자 Hanjoong

이번에 적용한 동적쿼리.
iBatis나 MyBatis의 사용법은 따로 책이 필요없듯이 쉽다.
간단하게 사용법 참고문서만 보면 되니깐~
맨처음에는 조금 헤맸는데 이제는 참고문서를 보지 않고도 필요한 부분은 직접 만들어서 사용 할 수 있을정도?
필요한 곳에 include시킬 수 있다는게 참 좋네 :)
 
<!-- 동적쿼리 -->
<sql id="dynamic">
	WHERE boardType=#boardType#
	<dynamic prepend="AND">
		<isNotEmpty property="fs">
			<isEqual property="fs" compareValue="name">
				name LIKE '%'||#ss#||'%'
			</isEqual>
			<isEqual property="fs" compareValue="subject">
				subject LIKE '%'||#ss#||'%'
			</isEqual>
			<isEqual property="fs" compareValue="content">
				content LIKE '%'||#ss#||'%'
			</isEqual>
		</isNotEmpty>
</dynamic>
</sql>
 
<select id="boardAllData" resultClass="BoardVO" parameterClass="java.util.Map">
	SELECT no,name,pwd,subject,content,boardType,typeNo,hitnum,regdate,ref,step,
	       jump,root,depth,filename,orgName,rownum,delOk,cmtCount
	FROM (
		SELECT A.*, rownum r
		FROM (
			SELECT * FROM yrsBoard
			<include refid="dynamic"/>
			ORDER BY ref DESC,step ASC) A)
			WHERE r>=#start# AND r&lt;=#end#
</select>
[출처] [iBatis] 동적쿼리|작성자 RAHM

=============
Batis 설치
 
      매우 간단하다 iBatis 라이브러리를 다운 받아 /WEB-INF/lib 에 넣기만 하면 된다.
      http://ibatis.apache.org     여기에서 다운 받도록 하자.
 
 
 
2. iBatis 설정
 
       2.1. SqlMapConfig 파일은 전체옵션을 설정하고 각각의 SQL Map 파일의 위치를 지정한다.
 
       (1) <properties> 요소  
                         :  공통 설정부분을 한 곳에 두고 가 환경별로 다른 값들은 properties 파일에 독립.
            
              porperties 파일을 지정하는 두 가지 방법.
 
                  ① resource - 클래스 패스상에 있는 리소스(혹은 파일)
                           : 클래스 로더가 애플리케이션의 클래스 패스에서 resource 를 찾으려는 시도를 하게된다.
                             클래스 로더를 이용하기 때문에 이를 리소스(resource) 라고 부른다.
 
                  ② url - Uniform Resource Locator(URL)
 
             db.properties 파일의 내용
                    jdbc.driverClassName=com.mysql.jdbc.Driver
                    jdbc.url=jdbc:mysql://localhost:3306/jpetstore
                    jdbc.username=root
                    jdbc.password=123
 
 
       (2) <settings> 요소    :  잡동사니 설정 옵션
 
                  ① lazyLoadingsEnabled : 적재 지연은 정보를 필요 할 때만 읽어들이고
                                           다른 데이터는 명시적인 요청이 있을 때까지 적재를 미루는 기술이다.
                 
                  ② cacheModelsEnabled : 성능을 향상시키는 기법으로 최근 사용된 데이터가
                                          미래에 다시 사용될 것이라 가정하고 메모리에 계속 저장해 두는 것.
 
                  ③ enhancementEnabled : 적재 지연 기능을 향상시킬지 여부르 지정하는데 사용한다.
 
                  ④ useStatementNamespace : 매핑구문이 적절한 이름을 가지고 있어야
                                             iBatis 가 실행 될 수 있도록 하는 옵션.
 
                  ⑤ maxRequest (비권장) : 한번에 실행될 수 있는 요청의 갯수
 
                  ⑥ maxSessions (비권장) : 활성 세션의 수
        
                  ⑦ maxTransactions (비권장) : 활성트랜잭션의 수
 
                      ** 항상 maxRequest 값이 maxSessions 갑보다 커야하고
                         maxSessions 값이 maxTransactions 값 보다 커야 한다.
 
 
 
              (3) <typeAlias> 요소   :  별칭설정
 
                   <typeAlias alias="Account"
                                 type="org.apache.ibatis.jpetstore.domain.Account" />
 
              (4) <transactionManager> 요소
 
                   ① <property>
                   ② <dataSource>
                                type - simple : 간단한 커넥션 풀을 내장한 데이터 소스를 설정하고자 할 때.
                                      -  DBCP : Jakarta Commons Database Connection Pool 구현을 제공
                                      -  JNDI : JNDI 를 통해 할당된 컨테이너 기반의 데이터 소스를 공유하도록 사용.
 
              (5) <typeHandler> 요소 
                         : JDBC 데이터베이스 전용 데이터 타입을 애플리케이션의 데이터 타입으로 변환.
                           이는 결과셋의 칼럼을 가져다 자바빈즈의 프로퍼티로 변환한다.
   
                     ex) StringYtpeHandler 같은 경우는 단순히 결과셋의 getString 메소드를 호출하고
                                          이를 String(문자열) 형으로 리턴한다.
                          
              (6) <sqlMap>요소
                     ① <resource> : SQL Map 파일을 자바 클래스패스에 두고 리소스로서 참조하고 싶을때 사용.
  
                                             

