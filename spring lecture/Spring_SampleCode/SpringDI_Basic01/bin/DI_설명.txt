[DI 개념]_1 : 의존성 주입 (의존 객체 주입)
프로젝트 -> 수 많은 클래스 생성 -> 클래스들의 서로간의 관계
1. 상속(is ~a)
2. 포함(has ~a)

<A라는 클래스는  B라는 클래스가 필요하다>
1. class A extends B{} 상속관계
2. class A {
  B b = new B();       객체생성
}
3. class A {           생성자
  B b;
  A(B b){
    this.b = b;
  }
}
4. class A {           함수
  public void print (B b){

  }
}.............etc

-NewRecordView 클래스가 NewRecord 에 의존한다
-NewRecordView 클래스가 필요한 객체를 [생성자]통해서 주입
-두객체의 lifecycle 은  같다
*오류 : DI는 Spring 에서만 존재하는 개념 (x)

result : 필요하는 객체는 [생성자] 통해서 주입(또는 생성) 사용가능 => 의존관계
---------------------------------------------------------------
[DI 개념]_2 : 의존성 주입 (의존 객체 주입)
-NewRecordView  클래스는 필요한 하는 객체를 setter 함수를 통해서
주입 받아서 사용하고 있다
-객체의 생성이 서로 독립적이다 > 필요시에 객체를 주입
-두객체의 lifecycle 은 같지 않다

---------------------------------------------------------------
시나리오
Class A  , Class B
[A라는 클래스가 B라는 클래스를 사용하는 방법]

1. 상속 (is-a) > Spring Framework 관심이 없어요

2. 포함(has-a)
   2.1 : 생성자를 통해서 (constructor injection)
   > A a = new A();
   > Class A {
                B b;
                public A(){
                  b = new B();
                }
             }
   >A라는 클래스의 [생성자]에서 B라는 객체 생성 사용


   2.2 : 함수(setter) (setter injection)
   >A a = new A();
   >B b = new B();
   >a.SetB(b);
   >Class A {
              private B b;
              public void SetB(B b){
                  this.b = b;
              }

            }
Result : SpringFrameWork은 다른 객체 참조(의존) 하기 위해서
         [constructor injection] , [setter injection] 사용
         => DI (Dependency injection)

 + Interface 까지 포함 되면 (금상첨화)  > 다형성 확보 > 느슨한 구조

DI3 + interface 까지 포함된 코드

정리)
순수한 JAVA 코드로 DI(의존성 주입)

1.생성자를 통해서
2.setter 함수 통해서
3.다형성(인터헤이스)
===================================================
Spring FrameWork 사용

1. Spring.IO 사이트 방문
   1.1 http://projects.spring.io/spring-framework/
   1.2 사용하려는 framework version 확인
   1.3 Maven : 주소 복사 해서 https://mvnrepository.com/ 사이트
   1.4 local 저장소에 다운받는 것이 원칙
   
   -spring 사이트 다운로드
   http://projects.spring.io/spring-framework/
   http://maven.springframework.org/release/org/springframework/spring/

2. 우리는 전체적인 이해를 위해서 직접 파일 다운로드
   2.1 프로젝트에 첨부(참조) 하는 방식
   2.2. SpringFramework 4.2.5 버전 다운로드
   2.3  SpringFramework 가 의존하는 클래스를 담고 있는
        spring-framework-3.0.2.RELEASE-dependencies 다운로드

3. SpringFramework 핵심 엔진(lib)
   core , context , beans , expression (핵심)
   jar 파일 참조 추가

4.
4.1 xml 파일 설정
4.2 annotation 설정 (권장)

result :
객체의 생성과 조립 > xml 설정  파일을 통해서
