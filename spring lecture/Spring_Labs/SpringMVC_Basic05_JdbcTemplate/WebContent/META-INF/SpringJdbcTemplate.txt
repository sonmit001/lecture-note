1. Table 생성
create table usermember(
 id varchar2(20),
 name varchar2(20),
 pwd  varchar2(20),
 email varchar2(20),
 age number
);

2.계정: springuser 비번:1004

3.model(vo,dto,domain : dao)
  view : jsp
  controller : controller 클래스 
4.view > WEB-INF> view > board > board.jsp


5.SpringMVC > 필수 jar 
-기본 : core , beans , expression , aop , context ...
-웹   : web , webmvc 
-의존 : logging ....
-jsp  : jstl
-DB   : ojdbc6.jar
-Spring JDBC : spring-jdbc , spring-tx 추가

6. 공통빈 설정하기
   (DB 작업 , JDBC 설정 코드)
 <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
     /WEB-INF/applicationContext.xml
    </param-value>
  </context-param>

참고 dispatcher 가 사용하는 IOC 컨테이너 여러개 설정하기
   <servlet>
    <servlet-name>dispatcher</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
   <init-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
     classpath:/WEB-INF/base1.xml
     classpath:/WEB-INF/base2.xml
    </param-value>
   </init-param>
   </servlet>


7. dispatcher 설정 (일반 빈 설정 , injection)

8. filter 설정

  
9.applicationContext.xml 공통빈에 
--DB연동
--기존 JDBC API (Connection , Statement , preparestatement , resultset)
--Spring 
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.core.JdbcTemplate;

10. view 단 작업 (레이아웃 구성) 