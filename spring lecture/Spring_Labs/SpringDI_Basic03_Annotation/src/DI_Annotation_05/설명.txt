객체의 생성과 조립(삽입) -> Spring 통해서 작업
-> xml 을 통해서 필요한 bean의 생성과 injection 처리
-> xml 없이도 지금와 동일한 작업이 가능
   => 자바코드 이용한 설정(자바코드 + Annotation )
   => xml (x)
   
   
선택사항 : xml 사용 또는  xml  설정없이 사용가능 (편리성에 따라서)
->xml문법 대신 자바코드를 이용해서 빈객체를 생성하고 프로퍼티 설정 가능

기존
ApplicationContext context =  
new GenericXmlApplicationContext("classpath:ApplicationContext04.xml");

현재
new AnnotationConfigApplicationContext()


사용 어노테이션은
1.  @Configuration :해당 클래스가 스프링의 설정으로 사용됨을 지정
    ex)
    @Configuration
    public class configcontext {}

2.  @Bean
    ex)
    @Configuration
    public class configcontext {
      
       @Bean
       public User user(){
         return new User();
       }
       
       xml 에서 아래코드과 같은 형태를 위 코드처럼 함수(method) 의 형태로 설계 
       <bean id="user" class="DI.User">
    }
    
result :
> 어노테이션과 [메서드 이름]을 이용해서 스프링 컨테이너가 사용할 빈 객체 설정
> 메서드가 리턴하는 객체를 빈객체로 사용하겠다

class MemberRegisterService{
   private MemberDao memberdao;
   public MemberRegisterService(MemberDao memberdao){
      this.memberdao = memberdao;
   }
}

1. xml 설정
<bean id="memberRegSvc" class="MemberRegisterService">
 <constructor-arg  ref="memberdao">
</bean>
<bean id="memberdao" class="MemberDao" />
   
1.1 추가  : @Autowired 적용
  class MemberRegisterService{
   private MemberDao memberdao;
   @Autowired
   public MemberRegisterService(MemberDao memberdao){
      this.memberdao = memberdao;
   }
}
<bean id="memberRegSvc" class="MemberRegisterService"/>
<bean id="memberdao" class="MemberDao" />
   
2. @Configuration
   @bean
   두개의 어노테이션을 이용해서 (java 코드 기반의 작업)
   
   @Configuration
   class Configcontext{
         
         @bean
         public MemberRegisterService memberRegSvc(){
           return new MemberRegisterService(memberdao());
         } 
         
         @bean
         public MemberDao memberdao(){
          return new MemberDao();
         }
   }
   
-------------------------------------------------------------
옵션 :
<bean id="m" class="board"></bean>

=> 자바코드
@bean
public board m(){
  return new board();
}

옵션_1
@bean(name="hello")
public board m(){
  return new board();
}